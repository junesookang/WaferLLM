param P: i16;
param Mt: i16;
param Kt: i16;

var px: i16 = 0;
var py: i16 = 0;

const _Mt_Kt: i16 = Mt * Kt;
const _Mt_Mt: i16 = Mt * Mt;

var is_first_px: bool = false;
var is_last_px: bool = false;

param y_send_color: color;
param y_recv_color: color;
param y_tran_color: color;

param c_right_recv: color;
param c_right_send: color;
param c_left_recv: color;
param c_left_send: color;

const ut1 = @get_ut_id(1);
const ut2 = @get_ut_id(2);

const reduce_src_dsr_1 = @get_dsr(dsr_src1, 2);
const reduce_dest_dsr_1 = @get_dsr(dsr_dest, 2);

const reduce_src_dsr_2 = @get_dsr(dsr_src1, 3);
const reduce_dest_dsr_2 = @get_dsr(dsr_dest, 3);

const right_in_dsr = @get_dsr(dsr_src1, 4);
const right_out_dsr = @get_dsr(dsr_dest, 4);
const left_in_dsr = @get_dsr(dsr_src1, 5);
const left_out_dsr = @get_dsr(dsr_dest, 5);

const y_in_dsr = @get_dsr(dsr_src1, 6);
const y_out_dsr = @get_dsr(dsr_dest, 6);

const right_send_dsr = @get_dsr(dsr_src1, 7);
const right_recv_dsr = @get_dsr(dsr_dest, 7);

const right_in_queue_id = @get_input_queue(2);
const right_out_queue_id = @get_output_queue(2);
const left_in_queue_id = @get_input_queue(3);
const left_out_queue_id = @get_output_queue(3);
const y_send_queue_id = @get_output_queue(4);
const y_recv_queue_id = @get_input_queue(4);

const right_in_dsd = @get_dsd(fabin_dsd, .{
    .fabric_color = c_right_recv, .extent = _Mt_Mt,
    .input_queue = right_in_queue_id,
    .simd_mode = .{ .simd_64 = true },
});
const right_out_dsd = @get_dsd(fabout_dsd, .{
    .fabric_color = c_right_send, .extent = _Mt_Mt,
    .output_queue = right_out_queue_id,
    .simd_mode = .{ .simd_64 = true },
});

const left_in_dsd = @get_dsd(fabin_dsd, .{
    .fabric_color = c_left_recv, .extent = _Mt_Mt,
    .input_queue = left_in_queue_id,
    .simd_mode = .{ .simd_64 = true },
});
const left_out_dsd = @get_dsd(fabout_dsd, .{
    .fabric_color = c_left_send, .extent = _Mt_Mt,
    .output_queue = left_out_queue_id,
    .simd_mode = .{ .simd_64 = true },
});

param y_finish_id: local_task_id;

const y_in_dsd = @get_dsd(fabin_dsd, .{
    .fabric_color = y_recv_color, .extent = _Mt_Kt,
    .input_queue = y_recv_queue_id,
    .simd_mode = .{ .simd_64 = true }
});
const y_out_dsd = @get_dsd(fabout_dsd, .{
    .fabric_color = y_send_color, .extent = _Mt_Kt,
    .output_queue = y_send_queue_id,
    .simd_mode = .{ .simd_64 = true }
});

const dummy = @zeros([1]f16);

var right_matrix_send_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{_Mt_Kt} -> dummy[i] });
var right_matrix_recv_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{_Mt_Kt} -> dummy[i] });

var reduce_send_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{_Mt_Mt} -> dummy[i] });
var reduce_recv_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{_Mt_Mt} -> dummy[i] });

fn init_(_px: i16, _py: i16) void {
    px = _px;
    py = _py;

    if (px == 0) {
        is_first_px = true;
    }

    if (px == P - 1) {
        is_last_px = true;
    }
}

fn reduce_add_x(reduce_root: i16, out_buffer_ptr: [*]f16, reduce_buffer_ptr: [*]f16) void {

    reduce_send_dsd = @set_dsd_base_addr(reduce_send_dsd, out_buffer_ptr);
    @load_to_dsr(reduce_src_dsr_1, reduce_send_dsd);

    if (px == reduce_root) {

        reduce_recv_dsd = @set_dsd_base_addr(reduce_recv_dsd, reduce_buffer_ptr);
        @load_to_dsr(reduce_dest_dsr_1, reduce_recv_dsd);
        @load_to_dsr(reduce_src_dsr_2, reduce_recv_dsd);
        @load_to_dsr(reduce_dest_dsr_2, reduce_recv_dsd);

        if (is_first_px and is_last_px) {
            @fmovh(reduce_dest_dsr_1, reduce_src_dsr_1);
        } else if (is_first_px) {
            @faddh(reduce_dest_dsr_1, left_in_dsd, reduce_src_dsr_1);
        } else if (is_last_px) {
            @faddh(reduce_dest_dsr_1, right_in_dsd, reduce_src_dsr_1);
        } else {
            @faddh(reduce_dest_dsr_1, left_in_dsd, reduce_src_dsr_1);
            @faddh(reduce_dest_dsr_2, right_in_dsd, reduce_src_dsr_2);
        }

    } else {

        if (is_first_px) {
            @load_to_dsr(reduce_dest_dsr_1, right_out_dsd);
            @fmovh(reduce_dest_dsr_1, reduce_src_dsr_1);
        } else if (is_last_px) {
            @load_to_dsr(reduce_dest_dsr_1, left_out_dsd);
            @fmovh(reduce_dest_dsr_1, reduce_src_dsr_1);
        } else if (px < reduce_root) {
            @load_to_dsr(reduce_dest_dsr_1, right_out_dsd);
            @faddh(reduce_dest_dsr_1, right_in_dsd, reduce_src_dsr_1);
        } else { // px > reduce_root
            @load_to_dsr(reduce_dest_dsr_1, left_out_dsd);
            @faddh(reduce_dest_dsr_1, left_in_dsd, reduce_src_dsr_1);
        }
    }
}

fn two_hop_comm_T(right_matrix_send_buffer_ptr: [*]f16, right_matrix_recv_buffer_ptr: [*]f16) void {

    right_matrix_send_dsd = @set_dsd_base_addr(right_matrix_send_dsd, right_matrix_send_buffer_ptr);
    right_matrix_recv_dsd = @set_dsd_base_addr(right_matrix_recv_dsd, right_matrix_recv_buffer_ptr);

    @load_to_dsr(right_send_dsr, right_matrix_send_dsd);
    @load_to_dsr(right_recv_dsr, right_matrix_recv_dsd);

    @mov16(y_out_dsr, right_send_dsr, .{.async=true, .unblock=y_finish_id});
    @mov16(right_recv_dsr, y_in_dsr, .{.async=true, .activate=y_finish_id});
}

comptime {
    @initialize_queue(right_in_queue_id, .{.color = c_right_recv});
    @initialize_queue(right_out_queue_id, .{.color = c_right_send});
    @initialize_queue(left_in_queue_id, .{.color = c_left_recv});
    @initialize_queue(left_out_queue_id, .{.color = c_left_send});
    @initialize_queue(y_recv_queue_id, .{.color = y_recv_color});
    @initialize_queue(y_send_queue_id, .{.color = y_send_color});

    @load_to_dsr(right_in_dsr, right_in_dsd);
    @load_to_dsr(right_out_dsr, right_out_dsd);
    @load_to_dsr(left_in_dsr, left_in_dsd);
    @load_to_dsr(left_out_dsr, left_out_dsd);
    @load_to_dsr(y_in_dsr, y_in_dsd, .{.async=true, .activate=y_finish_id, .ut_id = ut1});
    @load_to_dsr(y_out_dsr, y_out_dsd, .{.async=true, .unblock=y_finish_id, .ut_id = ut2});
}

comptime {
    @block(right_in_queue_id);
    @block(left_in_queue_id);
    @block(y_recv_queue_id);
}