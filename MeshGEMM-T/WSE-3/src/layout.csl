param P: i16;
param Mt: i16;
param Kt: i16;
param L: i16;
param R: i16;

// const LAUNCH: color = @get_color(0);

const C_R_0: color = @get_color(1);
const C_R_1: color = @get_color(2);
const C_L_0: color = @get_color(3);
const C_L_1: color = @get_color(4);

const Y_0: color = @get_color(10);
const Y_1: color = @get_color(11);
const Y_2: color = @get_color(12);

const memcpy = @import_module( "<memcpy/get_params>", .{
    .width = P,
    .height = P,
});

const comm = @import_module("comm_lib/comm_layout.csl", .{
    .P = P,
    .x_interleave = [4]color{C_R_0, C_R_1, C_L_0, C_L_1},
    .y_interleave = [3]color{Y_0, Y_1, Y_2},
});

layout {
    @set_rectangle(P, P);

    var px: i16 = 0;
    var py: i16 = 0;

    const comm_even = comm.get_step_params(true);
    const comm_odd = comm.get_step_params(false);

    px = 0;
    while (px < P) : (px += 2) {
        const memcpy_params = memcpy.get_params(px);

        py = 0;
        while (py < P) : (py += 1) {
            const comm_params = comm.get_params(px, py);
            @set_tile_code(px, py, "meshgemm.csl", .{
                .memcpy_params = memcpy_params,
                .comm_params = @concat_structs(comm_even, comm_params),
                .P = P, .Mt = Mt, .Kt = Kt, .L = L, .R = R
            });

            {
                @set_color_config(px, py, comm_even.c_right_send, .{ .routes = .{ .rx = .{RAMP}, .tx = .{EAST} } });
                @set_color_config(px, py, comm_even.c_right_recv, .{ .routes = .{ .rx = .{WEST}, .tx = .{RAMP} } });

                @set_color_config(px, py, comm_even.c_left_recv, .{ .routes = .{ .rx = .{EAST}, .tx = .{RAMP} } });
                @set_color_config(px, py, comm_even.c_left_send, .{ .routes = .{ .rx = .{RAMP}, .tx = .{WEST} } });
            }

            {
                if (py == 0) {
                    @set_color_config(px, py, comm_params.y_recv_color, .{ .routes = .{ .rx = .{SOUTH}, .tx = .{RAMP} } });
                    @set_color_config(px, py, comm_params.y_send_color, .{ .routes = .{ .rx = .{RAMP}, .tx = .{SOUTH} } });
                } else if (py == P-1) {
                    @set_color_config(px, py, comm_params.y_recv_color, .{ .routes = .{ .rx = .{NORTH}, .tx = .{RAMP} } });
                    @set_color_config(px, py, comm_params.y_send_color, .{ .routes = .{ .rx = .{RAMP}, .tx = .{NORTH} } });
                } else {
                    if (py % 2 == 0) {
                        @set_color_config(px, py, comm_params.y_recv_color, .{ .routes = .{ .rx = .{NORTH}, .tx = .{RAMP} } });
                        @set_color_config(px, py, comm_params.y_send_color, .{ .routes = .{ .rx = .{RAMP}, .tx = .{SOUTH} } });
                        @set_color_config(px, py, comm_params.y_tran_color, .{ .routes = .{ .rx = .{SOUTH}, .tx = .{NORTH} } });
                    } else {
                        @set_color_config(px, py, comm_params.y_recv_color, .{ .routes = .{ .rx = .{SOUTH}, .tx = .{RAMP} } });
                        @set_color_config(px, py, comm_params.y_send_color, .{ .routes = .{ .rx = .{RAMP}, .tx = .{NORTH} } });
                        @set_color_config(px, py, comm_params.y_tran_color, .{ .routes = .{ .rx = .{NORTH}, .tx = .{SOUTH} } });
                    }
                }
            }
        }
    }

    px = 1;
    while (px < P) : (px += 2) {
        const memcpy_params = memcpy.get_params(px);

        py = 0;
        while (py < P) : (py += 1) {
            const comm_params = comm.get_params(px, py);
            @set_tile_code(px, py, "meshgemm.csl", .{
                .memcpy_params = memcpy_params,
                .comm_params = @concat_structs(comm_odd, comm_params),
                .P = P, .Mt = Mt, .Kt = Kt, .L = L, .R = R
            });

            {
                @set_color_config(px, py, comm_odd.c_right_send, .{ .routes = .{ .rx = .{RAMP}, .tx = .{EAST} } });
                @set_color_config(px, py, comm_odd.c_right_recv, .{ .routes = .{ .rx = .{WEST}, .tx = .{RAMP} } });

                @set_color_config(px, py, comm_odd.c_left_recv, .{ .routes = .{ .rx = .{EAST}, .tx = .{RAMP} } });
                @set_color_config(px, py, comm_odd.c_left_send, .{ .routes = .{ .rx = .{RAMP}, .tx = .{WEST} } });
            }

            {
                if (py == 0) {
                    @set_color_config(px, py, comm_params.y_recv_color, .{ .routes = .{ .rx = .{SOUTH}, .tx = .{RAMP} } });
                    @set_color_config(px, py, comm_params.y_send_color, .{ .routes = .{ .rx = .{RAMP}, .tx = .{SOUTH} } });
                } else if (py == P-1) {
                    @set_color_config(px, py, comm_params.y_recv_color, .{ .routes = .{ .rx = .{NORTH}, .tx = .{RAMP} } });
                    @set_color_config(px, py, comm_params.y_send_color, .{ .routes = .{ .rx = .{RAMP}, .tx = .{NORTH} } });
                } else {
                    if (py % 2 == 0) {
                        @set_color_config(px, py, comm_params.y_recv_color, .{ .routes = .{ .rx = .{NORTH}, .tx = .{RAMP} } });
                        @set_color_config(px, py, comm_params.y_send_color, .{ .routes = .{ .rx = .{RAMP}, .tx = .{SOUTH} } });
                        @set_color_config(px, py, comm_params.y_tran_color, .{ .routes = .{ .rx = .{SOUTH}, .tx = .{NORTH} } });
                    } else {
                        @set_color_config(px, py, comm_params.y_recv_color, .{ .routes = .{ .rx = .{SOUTH}, .tx = .{RAMP} } });
                        @set_color_config(px, py, comm_params.y_send_color, .{ .routes = .{ .rx = .{RAMP}, .tx = .{NORTH} } });
                        @set_color_config(px, py, comm_params.y_tran_color, .{ .routes = .{ .rx = .{NORTH}, .tx = .{SOUTH} } });
                    }
                }
            }
        }
    }

    @export_name("X", [*]f16, true);
    @export_name("W", [*]f16, true);
    @export_name("res", [*]f16, true);

    @export_name("init_task", fn()void);
    @export_name("meshgemm_entry", fn()void);
    @export_name("meshgemm_host", fn(i16, i16)void);

    @export_name("time_memcpy", [*]f32, true);
    @export_name("time_ref", [*]f32, true);


    @export_name("f_memcpy_timestamps", fn()void);
    @export_name("f_reference_timestamps", fn()void);
}